#!/usr/bin/env node
var logger = require('../lib/logger');
var ENUMS = require('../lib/enums');

var http = require('http'),
    url = require('url'),
    fs = require('fs'),
    path = require('path'),
    os = require('os');

var interfaces = os.networkInterfaces();
var ipAddress = null;
for (var k in interfaces) {
    for (var k2 in interfaces[k]) {
        var address = interfaces[k][k2];
        if (address.family === 'IPv4' && !address.internal && ipAddress == null) {
            ipAddress = address.address;
        }
    }
}

var HTTP_PORT = 5000;

var server = http.createServer(function (request, response) {

    var reqUrl = url.parse(request.url, true);

    fs.readFile(path.join(__dirname, './index.html'), function(err, data){
        if(err){
            response.writeHead(404, {'Content-type' : 'text/plain'});
            response.end('404 Not Found\n');
            throw err;
        }

        var volumePrimaryPn = reqUrl.pathname.replace('/', '');
        if(volumePrimaryPn === '' || (volumePrimaryPn != 1 && volumePrimaryPn != 2)){
            volumePrimaryPn = 1;
        }

        var html = data.toString()
            .replace(/\$\{volumePrimaryPn\}/gi, volumePrimaryPn)
            .replace(/\$\{ipAddress\}/gi, ipAddress);

        response.writeHead(200, {'Content-type' : 'text/html'});
        response.end(html);
    });

}).listen(HTTP_PORT);

// ~ Create nornenjs server
var NornenjsServer = require('../lib/server').NornenjsServer;
var nornenjsServer = new NornenjsServer(server, true);
//var nornenjsServer = new NornenjsServer(server, false, '112.108.40.166');
nornenjsServer.connect();

/**
 * Override nodejs process delete function
 */
process.on('SIGINT', function() {
    nornenjsServer.close(function(){
        server.close(function() {
            process.exit(0);
        });
    });
});

// ~ Redis and mysql

var mysql      = require('mysql');
var connection = mysql.createConnection({
    host     : '112.108.40.166',
    user     : 'dotory',
    password : '1q2w3e4r!',
    database : 'nornenjs'
});


const redisHost = '127.0.0.1';
const redisPort = 6379;
var redis = require('redis');

var redisClient = redis.createClient(redisPort, redisHost);
redisClient.auth('');
redisClient.on('error', function(err) {
    console.log('Error In Redis Server', err);
});
redisClient.subscribe('thumbnail');

redisClient.on('message', function(channel, message) {
    var map = JSON.parse(message);
    if(channel == 'thumbnail'){

        var thumbnailOptionList = map.thumbnailOptionList;
        var data = map.data;
        var volume = map.volume;
        var savePaths = map.savePaths;
        var username = map.username;

        var CudaRender = require('../lib/cuda/render').CudaRender;
        var cu = require('../lib/cuda/load');
        var cuCtx = new cu.Ctx(0, cu.Device(0));
        var cudaRender = new CudaRender(
            ENUMS.RENDERING_TYPE.VOLUME, data.savePath,
            volume.width, volume.height, volume.depth,
            cuCtx, cu.moduleLoad(path.join(__dirname, '../src-cuda/volume.ptx')));

        var Encoding = require('../lib/cuda/encoding').Encoding;
        var encoding = new Encoding();
        cudaRender.init();

        var thumbnailPns = [];
        for(var i=0; i<thumbnailOptionList.length; i++){
            var thumbnailOption = thumbnailOptionList[i];
            cudaRender.type = thumbnailOption.type;
            cudaRender.mprType = thumbnailOption.mprType;
            cudaRender.transferScaleX = thumbnailOption.transferScaleX;
            cudaRender.transferScaleY = thumbnailOption.transferScaleY;
            cudaRender.transferScaleZ = thumbnailOption.transferScaleZ;

            var savePath = savePaths[i];
            encoding.thumbnail(cudaRender, savePath);
            connection.query('INSERT INTO `data`( `username`, `type`, `name`, `savePath`, `inputDate` ) VALUES ( ?, ?, ?, ?, SYSDATE() ) ', [ username, 2, 'thumbnail.png', savePath ], function (err, result) {
                if (!err) {
                    logger.debug(result);
                }
                thumbnailPns.push(result.insertId)
                if(i == thumbnailOptionList.length){
                    for(var j=0; j<thumbnailPns.length; j++) {
                        connection.query('INSERT INTO `thumbnail` (`dataPn`,`thumbnailPn`) VALUES ( ?, ? )', [data.pn, thumbnailPns[j]], function (err, result) {
                            if (!err) {
                                logger.debug(result);
                            }
                        });
                    }
                }
            });
        }

    }

});